name: C++ CI/CD Pipeline

on:
  push:
    branches:
      - main  # Запускать при пуше в ветку main
  pull_request:
    branches:
      - main  # Запускать при создании pull request в ветку main

jobs:
  build:
    runs-on: ubuntu-latest  # Используем последнюю версию Ubuntu

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # Клонируем репозиторий

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential cmake

      - name: Build project
        run: | 
          cd src
          make
         
      - name: Upload executable as artifact
        uses: actions/upload-artifact@v3
        with:
          name: proga
          path: devproj9exe

  test:
    needs: build
    runs-on: ubuntu-latest  # Используем последнюю версию Ubuntu

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3  # Клонируем репозиторий
        with: proga
        path: /usr/bin

      - name: Run tests
        run: |
          cicd/testexe

  package:
    needs: test  # Запускать только после успешного выполнения build
    runs-on: ubuntu-latest

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: proga
          path: /usr/bin

      - name: Install stuff
        run: |
          sudo apt update
          sudo apt install -y devscripts debhelper

      - name: Create .deb package # build right here and rename
        run: |
          dpkg-deb --build . 
          mv ..deb package.deb

      - name: Upload .deb package as artifact
        uses: actions/upload-artifact@v3
        with:
          name: project-deb
          path: package.deb

  release:
    needs: package
    runs-on: ubuntu-latest

    steps:
      - name: Download .deb package artifact
        uses: actions/download-artifact@v3
        with:
          name: project-deb
          path: .

      - name: release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1.0.0
          release_name: Release v1.0.0
          draft: false
          prerelease: false

      - name: Upload .deb package to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./project-deb.deb
          asset-name: project-deb.deb
          asset_content_type: application/vnd.debian.binary-package
